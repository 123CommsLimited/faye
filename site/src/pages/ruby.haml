.content
  = partial 'ruby_navigation'
  
  :textile
    h4. Setting up
    
    All Faye clients need a central messaging server to communicate with; the
    server records which clients are subscribed to which channels and handles
    routing of messages between clients. Setting up a server in Ruby is simple:
    
    <pre class="prettyprint">require 'faye'
    
    bayeux = Faye::RackAdapter.new(:mount => '/faye', :timeout => 25)
    bayeux.listen(9292)</pre>
    
    @bayeux.listen@ will block if EventMachine is not already running. The
    @RackAdapter@ class supports these options during setup:
    
    * @:mount@: the path on the host at which the Faye service is available. In
      this example, clients would connect to @http://localhost:9292/faye@ to
      talk to the server.
    * @:timeout@: the maximum time to hold a connection open before returning
      the response. This is given in seconds and must be smaller than the
      timeout on your frontend webserver. Faye uses Thin as its webserver, whose
      default timeout is 30 seconds.
    * @:extensions@: (optional) a list of extensions to add to the server,
      useful when using @RackAdapter@ as middleware.
    * @:engine@: (optional) the type and parameters for the engine you want to
      use - see 'Engines' below.
    
    The @listen()@ method can take options that specify the key and certificate
    files to use, which if given make the server respond to SSL traffic.
    
    <pre class="prettyprint">bayeux.listen(443,
      :key  => 'path/to/ssl.key',
      :cert => 'path/to/ssl.cert'
    )</pre>
    
    Faye can also be setup as Rack middleware, for example in front of a Sinatra
    application:
    
    <pre class="prettyprint"># config.ru
    require 'faye'
    require File.dirname(__FILE__) + '/app'
    
    use Faye::RackAdapter, :mount      => '/faye',
                           :timeout    => 25,
                           :extensions => [MyExtension.new]
    
    run Sinatra::Application</pre>
    
    h4. Notes
    
    A note about the mount point: mounting the server at @/faye@ will make the
    Faye server respond to any request whose path begins @/faye@; this is so
    that it can interoperate with clients that use different request paths for
    different channels.
    
    Being an event-driven application, Faye only works with event-driven servers.
    It currently only supports Thin, and makes some extensions to Thin in order
    to support WebSockets. If you use @rackup@ you'll need to specify Thin as
    the web server, and set the environment to @production@ so that Rack does
    not load the development middlewares that are not compatible with Thin's
    async protocol.
    
    <pre class="prettyprint">rackup config.ru -s thin -E production</pre>
