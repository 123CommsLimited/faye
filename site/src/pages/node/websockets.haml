.content
  = partial 'node_navigation'
  
  :textile
    h4. WebSockets for Node
    
    Since version 0.5, Faye has supported WebSockets as a network transport for
    sending messages to the browser. The WebSocket classes in Faye are now
    stable enough for you to use stand-alone to write your own socket servers
    and clients.
    
    Faye's WebSocket server can process "draft-75":http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75,
    "draft-76":http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76,
    "hybi-07":http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-07
    and later versions of the protocol. It selects protocol versions
    automatically and presents the standard "WebSocket API":http://dev.w3.org/html5/websockets/
    for you to program against. It supports both @text@ and @binary@ messages,
    and automatically handles @ping@, @pong@, @close@ and fragmented messages.
    
    h4. Writing a WebSocket server
    
    You can handle WebSockets on the server side by listening to Node's @upgrade@
    event on an HTTP server, and creating a new socket for the request. This
    socket object exposes the usual WebSocket methods for receiving and sending
    messages. For example this is how you'd implement an echo server:
    
    <pre class="prettyprint">var http = require('http'),
        faye = require('faye');
        
    var server = http.createServer();
    
    server.addListener('upgrade', function(request, socket, head) {
      var ws = new faye.WebSocket(request, head);
      
      ws.onmessage = function(event) {
        ws.send(event.data);
      };
      
      ws.onclose = function(event) {
        console.log('close', event.code, event.reason);
        ws = null;
      };
    });
    
    server.listen(8000);</pre>
    
    h4. Using the WebSocket client
    
    Faye includes a WebSocket client; it uses this to make connections when
    you use a server-side client. It supports both the plain-text @ws@ protocol
    and the encrypted @wss@ protocol, and has exactly the same interface as a
    socket you would use in a web browser. On the wire it identifies itself as
    "hybi-08":http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-08,
    though it's compatible with servers speaking later versions of the protocol,
    at least up to version 17.
    
    <pre class="prettyprint">var faye = require('faye');
    
    var ws = new faye.WebSocket.Client('ws://www.example.com/');
    
    ws.onopen = function(event) {
      console.log('open');
      ws.send('Hello, world!');
    };
    
    ws.onmessage = function(event) {
      console.log(event.data);
    };
    
    ws.onclose = function(event) {
      console.log('close', event.code, event.reason);
      ws = null;
    };</pre>
    
    h4. WebSocket API
    
    The WebSocket API consists of several event handlers and a method for
    sending messages.
    
    * @onopen@ fires when the socket connection is established. Event has no
      attributes.
    * @onerror@ fires when the connection attempt fails. Event has no attributes.
    * @onmessage@ fires when the socket receives a message. Event has one
      attribute, @data@, which is either a @String@ (for text frames) or a
      @Buffer@ (for binary frames).
    * @onclose@ fires when either the client or the server closes the connection.
      Event has two optional attributes, @code@ and @reason@, that expose the
      status code and message sent by the peer that closed the connection.
    * @send()@ accepts either a @String@ or a @Buffer@ and sends a text or
      binary message over the connection to the other peer.
